{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.0rc1", "generated_at": "2024-12-31T07:13:40.789258Z", "invocation_id": "634aa1db-bed4-4674-8508-0b587c8b32f9", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-31T07:13:40.507428Z", "completed_at": "2024-12-31T07:13:40.527679Z"}, {"name": "execute", "started_at": "2024-12-31T07:13:40.533765Z", "completed_at": "2024-12-31T07:13:40.533796Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.027787446975708008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.pet_project_dbt.count_tracks_per_artist", "compiled": true, "compiled_code": "WITH all_of_need AS (\n         SELECT t.artist_id,\n            a.name,\n            t.track_id,\n            t.title\n           FROM \"yandex_music_pet_project\".\"public\".\"tracks\" as t\n             LEFT JOIN \"yandex_music_pet_project\".\"public\".\"artists\" as a USING (artist_id)\n        )\n SELECT all_of_need.artist_id,\n    all_of_need.name,\n    count(DISTINCT all_of_need.track_id) AS count\n   FROM all_of_need\n  GROUP BY all_of_need.artist_id, all_of_need.name\n  ORDER BY (count(DISTINCT all_of_need.track_id)) DESC", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-31T07:13:40.528686Z", "completed_at": "2024-12-31T07:13:40.536599Z"}, {"name": "execute", "started_at": "2024-12-31T07:13:40.538980Z", "completed_at": "2024-12-31T07:13:40.538996Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.015238761901855469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.pet_project_dbt.albums_metrics_view", "compiled": true, "compiled_code": "WITH ranked_albums AS (\n         SELECT albums_metrics.album_id,\n            first_value(albums_metrics.likes_count) OVER (PARTITION BY albums_metrics.album_id, (date(albums_metrics.dt)) ORDER BY albums_metrics.dt DESC) AS likes_count,\n            date(albums_metrics.dt) AS date\n           FROM \"yandex_music_pet_project\".\"public\".\"albums_metrics\" -- \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u043b\u0432\u0435\u043d\u0438\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0430\u043a\u0440\u043e\u0441 ref\n        )\n SELECT DISTINCT ranked_albums.album_id,\n    ranked_albums.likes_count,\n    ranked_albums.date\n   FROM ranked_albums\n  ORDER BY ranked_albums.date", "relation_name": "\"yandex_music_pet_project\".\"yandex_music_dbt\".\"albums_metrics_view\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-31T07:13:40.539952Z", "completed_at": "2024-12-31T07:13:40.546940Z"}, {"name": "execute", "started_at": "2024-12-31T07:13:40.548356Z", "completed_at": "2024-12-31T07:13:40.548373Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012646913528442383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.pet_project_dbt.artists_metrics_view", "compiled": true, "compiled_code": "WITH ranked_artists AS (\n         SELECT artists_metrics.artist_id,\n            first_value(artists_metrics.likes_count) OVER (PARTITION BY artists_metrics.artist_id, (date(artists_metrics.dt)) ORDER BY artists_metrics.dt DESC) AS likes_count,\n            first_value(artists_metrics.ratings_month) OVER (PARTITION BY artists_metrics.artist_id, (date(artists_metrics.dt)) ORDER BY artists_metrics.dt DESC) AS ratings_month,\n            first_value(artists_metrics.ratings_week) OVER (PARTITION BY artists_metrics.artist_id, (date(artists_metrics.dt)) ORDER BY artists_metrics.dt DESC) AS ratings_week,\n            first_value(artists_metrics.ratings_day) OVER (PARTITION BY artists_metrics.artist_id, (date(artists_metrics.dt)) ORDER BY artists_metrics.dt DESC) AS ratings_day,\n            date(artists_metrics.dt) AS date\n           FROM \"yandex_music_pet_project\".\"public\".\"artists_metrics\" \n        )\n SELECT DISTINCT ranked_artists.artist_id,\n    ranked_artists.likes_count,\n    ranked_artists.ratings_month,\n    ranked_artists.ratings_week,\n    ranked_artists.ratings_day,\n    ranked_artists.date\n   FROM ranked_artists\n  ORDER BY ranked_artists.date", "relation_name": "\"yandex_music_pet_project\".\"yandex_music_dbt\".\"artists_metrics_view\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-31T07:13:40.550658Z", "completed_at": "2024-12-31T07:13:40.563628Z"}, {"name": "execute", "started_at": "2024-12-31T07:13:40.565063Z", "completed_at": "2024-12-31T07:13:40.565082Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017666339874267578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.pet_project_dbt.artists_view", "compiled": true, "compiled_code": "WITH all_data_needed AS (\n         SELECT artists.artist_id,\n            artists.name,\n            unnest(\n                CASE\n                    WHEN artists.name = 'Moby'::text THEN string_to_array('electronics,triphop,house,downtempo,ambient,alternative,techno,punk,rock,chill-out,folk'::text, ','::text)\n                    WHEN artists.name = 'Burial'::text THEN string_to_array('electronics,dubstep,ambient,ukgarage,ukbass'::text, ','::text)\n                    WHEN artists.name = 'deadmau5'::text THEN string_to_array('electronics,progressive house,electro house,techno,dubstep'::text, ','::text)\n                    WHEN artists.name = 'Armin van Buuren'::text THEN string_to_array('eletronics,trance,dance'::text, ','::text)\n                    when artists.name = 'ARTY'::text then string_to_array('dance,trance,kpop,lounge'::text, ','::text)\n                    when artists.name = 'Bon Iver'::text then string_to_array('indie,pop'::text, ','::text)\n                    when artists.name = 'Estiva'::text then string_to_array('trance,house,techno,dance'::text, ','::text)\n                    when artists.name = 'Lane 8'::text then string_to_array('house,techno,dance,electronics'::text, ','::text)\n                    when artists.name = 'Matt Lange'::text then string_to_array('soundtrack,electronics,dance,rock,alternative'::text, ','::text)\n                    when artists.name = 'Mat Zo'::text then string_to_array('experimental,dance, electronics,trance,dnb'::text, ','::text)\n                    when artists.name = 'Mogwai'::text then string_to_array('alternative,electronics,trance,rock,pop,soundtrack'::text, ','::text)\n                    when artists.name = 'Noisia'::text then string_to_array('dnb,dubstep'::text, ','::text)\n                    when artists.name = 'Rohaan'::text then string_to_array('electronics,dance,dnb'::text, ','::text)\n                    when artists.name = 'Sander Van Doorn'::text then string_to_array('tracne,dance'::text, ','::text)\n                    when artists.name = 'Sigur R\u00f3s'::text then string_to_array('postrock, experimental'::text, ','::text)\n                    when artists.name = 'Trent Reznor'::text then string_to_array('electronics,animated,soundtrack,films'::text, ','::text)\n                    when artists.name = 'Uppermost'::text then string_to_array('electronics,house,lounge'::text, ','::text)\n                    when artists.name = 'Andrew Bayer'::text then string_to_array('electronics,dance,trance'::text, ','::text)\n                    when artists.name = 'Duumu'::text then string_to_array('electronics,dance,relax,folk'::text, ','::text)\n                    when artists.name = 'Ilan Bluestone'::text then string_to_array('dance,trance'::text, ','::text)\n                    when artists.name = 'London Grammar'::text then string_to_array('indie, ukbass'::text, ','::text)\n                    ELSE string_to_array(replace(artists.genres, 'genre'::text, ''::text), ','::text)\n                END) AS genres,\n            artists.countries,\n            date_trunc('year'::text,\n                CASE\n                    WHEN artists.init_date ~ '^\\d{4}-\\d{2}-\\d{2}$'::text THEN artists.init_date::timestamp without time zone\n                    ELSE NULL::timestamp without time zone\n                END) AS init_date,\n            artists.cover_uri,\n            artists.counts_tracks,\n            artists.counts_direct_albums,\n            artists.description_text\n           FROM \"yandex_music_pet_project\".\"public\".\"artists\"\n        ), artist_table_first AS (\n         SELECT all_data_needed.artist_id,\n            all_data_needed.name,\n            replace(TRIM(BOTH '[]'::text FROM all_data_needed.genres), ''''::text, ''::text) AS genres,\n            replace(TRIM(BOTH '[]'::text FROM all_data_needed.countries), ''''::text, ''::text) AS countries,\n            date_part('year'::text, all_data_needed.init_date) AS init_date,\n            all_data_needed.cover_uri,\n            all_data_needed.counts_tracks,\n            all_data_needed.counts_direct_albums,\n            all_data_needed.description_text\n           FROM all_data_needed\n        ), artist_table_second AS (\n         SELECT artist_table_first.artist_id,\n            artist_table_first.name,\n            artist_table_first.genres,\n                CASE\n                    WHEN artist_table_first.name = 'Lane 8'::text THEN 'United States'::text\n                    WHEN artist_table_first.name = 'Synkro'::text THEN 'Canada'::text\n                    WHEN artist_table_first.name = 'Duumu'::text THEN 'France'::text\n                    WHEN artist_table_first.name = 'Vacant'::text THEN 'United Kingdom'::text\n                    WHEN artist_table_first.name = 'Matt Lange'::text THEN 'United States'::text\n                    WHEN artist_table_first.name = 'Ilan Bluestone'::text THEN 'United Kingdom'::text\n                    WHEN artist_table_first.name = 'Owsey'::text THEN 'Ireland'::text\n                    WHEN artist_table_first.name = 'LXST CXNTURY'::text THEN 'Belarus'::text\n                    WHEN artist_table_first.name = 'iSorin'::text THEN 'United States'::text\n                    WHEN artist_table_first.name = 'Estiva'::text THEN 'Netherlands'::text\n                    WHEN artist_table_first.name = 'Andrew Bayer'::text THEN 'United States'::text\n                    WHEN artist_table_first.name = 'Rohaan'::text THEN 'United Kingdom'::text\n                    WHEN artist_table_first.name = 'Koven'::text THEN 'United Kingdom'::text\n                    WHEN artist_table_first.name = 'Uppermost'::text THEN 'France'::text\n                    WHEN artist_table_first.name = 'Sebastian Sellares'::text THEN 'Argentina'::text\n                    WHEN artist_table_first.name = '36'::text THEN 'United Kingdom'::text\n                    WHEN artist_table_first.name = 'Spencer Brown'::text THEN 'United States'::text\n                    WHEN artist_table_first.name = 'Marsh'::text THEN 'United Kingdom'::text\n                    ELSE artist_table_first.countries\n                END AS countries,\n            artist_table_first.init_date,\n            artist_table_first.cover_uri,\n            artist_table_first.counts_tracks,\n            artist_table_first.counts_direct_albums,\n            artist_table_first.description_text\n           FROM artist_table_first\n        ), final AS (\n         SELECT artist_table_second.artist_id,\n            artist_table_second.name,\n            artist_table_second.genres,\n                CASE\n                    WHEN artist_table_second.countries IS NOT NULL AND (artist_table_second.countries <> ALL (ARRAY['\u0421\u0428\u0410'::text, '\u0412\u0435\u043b\u0438\u043a\u043e\u0431\u0440\u0438\u0442\u0430\u043d\u0438\u044f'::text, '\u0420\u043e\u0441\u0441\u0438\u044f'::text, '\u0413\u0435\u0440\u043c\u0430\u043d\u0438\u044f'::text, '\u0424\u0440\u0430\u043d\u0446\u0438\u044f'::text, '\u0418\u0441\u043b\u0430\u043d\u0434\u0438\u044f'::text, '\u041d\u043e\u0440\u0432\u0435\u0433\u0438\u044f'::text, '\u041d\u0438\u0434\u0435\u0440\u043b\u0430\u043d\u0434\u044b'::text, '\u041a\u0430\u043d\u0430\u0434\u0430'::text])) THEN artist_table_second.countries\n                    WHEN artist_table_second.countries = '\u0421\u0428\u0410'::text THEN 'United States'::text\n                    WHEN artist_table_second.countries = '\u0412\u0435\u043b\u0438\u043a\u043e\u0431\u0440\u0438\u0442\u0430\u043d\u0438\u044f'::text THEN 'United Kingdom'::text\n                    WHEN artist_table_second.countries = '\u0420\u043e\u0441\u0441\u0438\u044f'::text THEN 'Russia'::text\n                    WHEN artist_table_second.countries = '\u0413\u0435\u0440\u043c\u0430\u043d\u0438\u044f'::text THEN 'Germany'::text\n                    WHEN artist_table_second.countries = '\u0424\u0440\u0430\u043d\u0446\u0438\u044f'::text THEN 'France'::text\n                    WHEN artist_table_second.countries = '\u0418\u0441\u043b\u0430\u043d\u0434\u0438\u044f'::text THEN 'Iceland'::text\n                    WHEN artist_table_second.countries = '\u041d\u043e\u0440\u0432\u0435\u0433\u0438\u044f'::text THEN 'Norway'::text\n                    WHEN artist_table_second.countries = '\u041d\u0438\u0434\u0435\u0440\u043b\u0430\u043d\u0434\u044b'::text THEN 'Netherlands'::text\n                    WHEN artist_table_second.countries = '\u041a\u0430\u043d\u0430\u0434\u0430'::text THEN 'Canada'::text\n                    ELSE NULL::text\n                END AS countries,\n            artist_table_second.init_date,\n            replace(artist_table_second.cover_uri, '%%'::text, '400x400'::text) AS cover_uri,\n            artist_table_second.counts_tracks,\n            artist_table_second.counts_direct_albums,\n            artist_table_second.description_text\n           FROM artist_table_second\n        )\n SELECT final.artist_id,\n    final.name,\n    TRIM(BOTH FROM final.genres) AS genres,\n    final.countries,\n    final.init_date,\n    final.cover_uri,\n    final.counts_tracks,\n    final.counts_direct_albums,\n    final.description_text\n   FROM final", "relation_name": "\"yandex_music_pet_project\".\"yandex_music_dbt\".\"artists_view\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-31T07:13:40.558871Z", "completed_at": "2024-12-31T07:13:40.564543Z"}, {"name": "execute", "started_at": "2024-12-31T07:13:40.566221Z", "completed_at": "2024-12-31T07:13:40.566236Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009245157241821289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.pet_project_dbt.popular_tracks_of_artists", "compiled": true, "compiled_code": "select artist_id,\n       a.name,\n       al.album_id,\n       al.title as album_title,\n       popular_track_id,\n       pt.title,\n       replace(pt.cover_uri, '%%'::text, '400x400'::text) AS cover_uri\nfrom \"yandex_music_pet_project\".\"public\".\"popular_tracks\" as pt\n  left join \"yandex_music_pet_project\".\"public\".\"artists\" as a using (artist_id)\n  left join \"yandex_music_pet_project\".\"public\".\"albums\" as al using (artist_id)", "relation_name": "\"yandex_music_pet_project\".\"yandex_music_dbt\".\"popular_tracks_of_artists\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-31T07:13:40.571664Z", "completed_at": "2024-12-31T07:13:40.607384Z"}, {"name": "execute", "started_at": "2024-12-31T07:13:40.609641Z", "completed_at": "2024-12-31T07:13:40.609669Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.041121482849121094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.pet_project_dbt.similar_artists_view", "compiled": true, "compiled_code": "WITH all_of_need AS (\n         SELECT similar_artists.artist_id,\n            similar_artists.similar_artist_id,\n            similar_artists.name as similar_artist_name,\n            replace(TRIM(BOTH '{}'::text FROM similar_artists.genres), ''''::text, ''::text) AS genres,\n            similar_artists.cover_uri,\n            similar_artists.counts_tracks,\n            similar_artists.counts_direct_albums\n           FROM \"yandex_music_pet_project\".\"public\".\"similar_artists\"\n        ), similar_artists_with_name AS (\n         SELECT aon.artist_id,\n            a.name,\n            aon.similar_artist_id,\n            aon.similar_artist_name,\n            unnest(string_to_array(aon.genres, ','::text)) AS genres,\n            aon.cover_uri,\n            aon.counts_tracks,\n            aon.counts_direct_albums\n           FROM all_of_need aon\n             LEFT JOIN \"yandex_music_pet_project\".\"public\".\"artists\" as a USING (artist_id)\n        )\n SELECT similar_artists_with_name.artist_id,\n    similar_artists_with_name.name,\n    similar_artists_with_name.similar_artist_id,\n    similar_artists_with_name.similar_artist_name,\n    regexp_replace(similar_artists_with_name.genres, 'genre$'::text, ''::text) AS genres,\n    replace(similar_artists_with_name.cover_uri, '%%'::text, '400x400'::text) AS cover_uri,\n    similar_artists_with_name.counts_tracks,\n    similar_artists_with_name.counts_direct_albums\n   FROM similar_artists_with_name", "relation_name": "\"yandex_music_pet_project\".\"yandex_music_dbt\".\"similar_artists_view\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-31T07:13:40.576696Z", "completed_at": "2024-12-31T07:13:40.608972Z"}, {"name": "execute", "started_at": "2024-12-31T07:13:40.611450Z", "completed_at": "2024-12-31T07:13:40.611473Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.042090654373168945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.pet_project_dbt.dbt_utils_source_recency_public_albums_metrics_day__dt__1.c253291a04", "compiled": true, "compiled_code": "\n\n\n\n\n\n\nwith recency as (\n\n    select \n\n      \n      \n        max(dt) as most_recent\n\n    from \"yandex_music_pet_project\".\"public\".\"albums_metrics\"\n\n    \n\n)\n\nselect\n\n    \n    most_recent,\n    cast(\n\n    now() + ((interval '1 day') * (-1))\n\n as timestamp) as threshold\n\nfrom recency\nwhere most_recent < cast(\n\n    now() + ((interval '1 day') * (-1))\n\n as timestamp)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-31T07:13:40.628657Z", "completed_at": "2024-12-31T07:13:40.640789Z"}, {"name": "execute", "started_at": "2024-12-31T07:13:40.641436Z", "completed_at": "2024-12-31T07:13:40.641452Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02570033073425293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.pet_project_dbt.source_not_null_public_albums_album_id.a860db51f6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect album_id\nfrom \"yandex_music_pet_project\".\"public\".\"albums\"\nwhere album_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-31T07:13:40.618357Z", "completed_at": "2024-12-31T07:13:40.644651Z"}, {"name": "execute", "started_at": "2024-12-31T07:13:40.651441Z", "completed_at": "2024-12-31T07:13:40.651463Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.036713600158691406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.pet_project_dbt.dbt_utils_source_recency_public_artists_metrics_day__dt__1.01fd33fec4", "compiled": true, "compiled_code": "\n\n\n\n\n\n\nwith recency as (\n\n    select \n\n      \n      \n        max(dt) as most_recent\n\n    from \"yandex_music_pet_project\".\"public\".\"artists_metrics\"\n\n    \n\n)\n\nselect\n\n    \n    most_recent,\n    cast(\n\n    now() + ((interval '1 day') * (-1))\n\n as timestamp) as threshold\n\nfrom recency\nwhere most_recent < cast(\n\n    now() + ((interval '1 day') * (-1))\n\n as timestamp)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-31T07:13:40.645465Z", "completed_at": "2024-12-31T07:13:40.653031Z"}, {"name": "execute", "started_at": "2024-12-31T07:13:40.654692Z", "completed_at": "2024-12-31T07:13:40.654707Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011422872543334961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.pet_project_dbt.source_not_null_public_albums_metrics_album_id.a554089471", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect album_id\nfrom \"yandex_music_pet_project\".\"public\".\"albums_metrics\"\nwhere album_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-31T07:13:40.668542Z", "completed_at": "2024-12-31T07:13:40.674533Z"}, {"name": "execute", "started_at": "2024-12-31T07:13:40.675262Z", "completed_at": "2024-12-31T07:13:40.675279Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017206192016601562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.pet_project_dbt.source_not_null_public_artists_metrics_artist_id.effaa50ed9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect artist_id\nfrom \"yandex_music_pet_project\".\"public\".\"artists_metrics\"\nwhere artist_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-31T07:13:40.659100Z", "completed_at": "2024-12-31T07:13:40.676344Z"}, {"name": "execute", "started_at": "2024-12-31T07:13:40.677994Z", "completed_at": "2024-12-31T07:13:40.678013Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.022428512573242188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.pet_project_dbt.source_not_null_public_artists_artist_id.7804c90589", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect artist_id\nfrom \"yandex_music_pet_project\".\"public\".\"artists\"\nwhere artist_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-31T07:13:40.682774Z", "completed_at": "2024-12-31T07:13:40.691797Z"}, {"name": "execute", "started_at": "2024-12-31T07:13:40.697990Z", "completed_at": "2024-12-31T07:13:40.698010Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018830537796020508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.pet_project_dbt.source_not_null_public_popular_tracks_popular_track_id.2bcdf222fe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect popular_track_id\nfrom \"yandex_music_pet_project\".\"public\".\"popular_tracks\"\nwhere popular_track_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-31T07:13:40.692394Z", "completed_at": "2024-12-31T07:13:40.701358Z"}, {"name": "execute", "started_at": "2024-12-31T07:13:40.710843Z", "completed_at": "2024-12-31T07:13:40.710862Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02910017967224121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.pet_project_dbt.source_not_null_public_tracks_track_id.79cf84c23b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect track_id\nfrom \"yandex_music_pet_project\".\"public\".\"tracks\"\nwhere track_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-31T07:13:40.701974Z", "completed_at": "2024-12-31T07:13:40.712098Z"}, {"name": "execute", "started_at": "2024-12-31T07:13:40.713446Z", "completed_at": "2024-12-31T07:13:40.713460Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013472557067871094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.pet_project_dbt.source_unique_public_artists_artist_id.06cfddb818", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    artist_id as unique_field,\n    count(*) as n_records\n\nfrom \"yandex_music_pet_project\".\"public\".\"artists\"\nwhere artist_id is not null\ngroup by artist_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-31T07:13:40.723263Z", "completed_at": "2024-12-31T07:13:40.728007Z"}, {"name": "execute", "started_at": "2024-12-31T07:13:40.728597Z", "completed_at": "2024-12-31T07:13:40.728614Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012129545211791992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.pet_project_dbt.all_about_artists_view", "compiled": true, "compiled_code": "SELECT amv.artist_id,\n    max(amv.likes_count) AS likes_count,\n    max(amv.ratings_month) AS ratings_month,\n    max(amv.ratings_week) AS ratings_week,\n    max(amv.ratings_day) AS ratings_day,\n    max(amv.date) AS date,\n    av.name,\n    av.genres,\n    av.countries,\n    av.init_date,\n    replace(av.cover_uri, '%%'::text, '400x400'::text) AS cover_uri,\n    av.counts_tracks,\n    av.counts_direct_albums,\n    av.description_text\n   FROM \"yandex_music_pet_project\".\"yandex_music_dbt\".\"artists_metrics_view\" as amv\n     LEFT JOIN \"yandex_music_pet_project\".\"yandex_music_dbt\".\"artists_view\" as av USING (artist_id)\n  GROUP BY amv.artist_id, av.name, av.genres, av.countries, av.init_date, av.cover_uri, av.counts_tracks, av.counts_direct_albums, av.description_text\n  ORDER BY (max(amv.date)) DESC", "relation_name": "\"yandex_music_pet_project\".\"yandex_music_dbt\".\"all_about_artists_view\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-31T07:13:40.717414Z", "completed_at": "2024-12-31T07:13:40.729644Z"}, {"name": "execute", "started_at": "2024-12-31T07:13:40.731180Z", "completed_at": "2024-12-31T07:13:40.731199Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016820430755615234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.pet_project_dbt.all_about_artists_retrospective_view", "compiled": true, "compiled_code": "SELECT amv.artist_id,\n    amv.likes_count,\n    amv.ratings_month,\n    amv.ratings_week,\n    amv.ratings_day,\n    amv.date,\n    av.name,\n    av.genres,\n    av.countries,\n    av.init_date,\n    replace(av.cover_uri, '%%'::text, '400x400'::text) AS cover_uri,\n    av.counts_tracks,\n    av.counts_direct_albums,\n    av.description_text\n   FROM \"yandex_music_pet_project\".\"yandex_music_dbt\".\"artists_metrics_view\" as amv\n     LEFT JOIN \"yandex_music_pet_project\".\"yandex_music_dbt\".\"artists_view\" as av USING (artist_id)", "relation_name": "\"yandex_music_pet_project\".\"yandex_music_dbt\".\"all_about_artists_retrospective_view\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-31T07:13:40.733646Z", "completed_at": "2024-12-31T07:13:40.739292Z"}, {"name": "execute", "started_at": "2024-12-31T07:13:40.739854Z", "completed_at": "2024-12-31T07:13:40.739867Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007828474044799805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.pet_project_dbt.ratings_of_albums_view", "compiled": true, "compiled_code": "SELECT amv.album_id,\n    max(amv.likes_count) AS likes_count,\n    max(amv.date) AS date,\n    al.artist_id,\n    al.title,\n    al.track_count,\n    al.cover_uri,\n    regexp_replace(al.genre, 'genre$'::text, ''::text) AS genres,\n    al.release_date::date AS release_date,\n    al.label_id,\n    al.label_name,\n    ar.name,\n    av.countries\n   FROM \"yandex_music_pet_project\".\"yandex_music_dbt\".\"albums_metrics_view\" as amv\n     LEFT JOIN \"yandex_music_pet_project\".\"public\".\"albums\" as al USING (album_id)\n     LEFT JOIN \"yandex_music_pet_project\".\"public\".\"artists\" as ar USING (artist_id)\n     LEFT JOIN \"yandex_music_pet_project\".\"yandex_music_dbt\".\"artists_view\" as av USING (artist_id)\n  GROUP BY amv.album_id, al.artist_id, al.title, al.track_count, al.cover_uri, (regexp_replace(al.genre, 'genre$'::text, ''::text)), (al.release_date::date), al.label_id, al.label_name, ar.name, av.countries", "relation_name": "\"yandex_music_pet_project\".\"yandex_music_dbt\".\"ratings_of_albums_view\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-31T07:13:40.751697Z", "completed_at": "2024-12-31T07:13:40.756358Z"}, {"name": "execute", "started_at": "2024-12-31T07:13:40.756938Z", "completed_at": "2024-12-31T07:13:40.756960Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013582229614257812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.pet_project_dbt.artists_release_history_view", "compiled": true, "compiled_code": "with generated_dates as \n (\n   SELECT generate_series((( SELECT min(release_date) AS min\n                              FROM \"yandex_music_pet_project\".\"yandex_music_dbt\".\"ratings_of_albums_view\" as roav))::timestamp without time zone, CURRENT_DATE - '1 day'::interval, '1 day'::interval)::date AS date\n )\n select gd.date,\n        CASE\n            WHEN gd.date = roav.release_date THEN roav.release_date\n            ELSE NULL::date\n        END AS release_date,\n        roav.artist_id,\n        roav.name,\n        roav.album_id,\n        roav.title,\n        roav.likes_count,\n        roav.genres\n   FROM generated_dates as gd\n     LEFT JOIN \"yandex_music_pet_project\".\"yandex_music_dbt\".\"ratings_of_albums_view\" as roav ON gd.date = roav.release_date\n  ORDER BY gd.date asc", "relation_name": "\"yandex_music_pet_project\".\"yandex_music_dbt\".\"artists_release_history_view\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-31T07:13:40.745596Z", "completed_at": "2024-12-31T07:13:40.758688Z"}, {"name": "execute", "started_at": "2024-12-31T07:13:40.760351Z", "completed_at": "2024-12-31T07:13:40.760367Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01767873764038086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.pet_project_dbt.count_albums_per_artist", "compiled": true, "compiled_code": "SELECT ratings_of_albums_view.name,\n    count(DISTINCT ratings_of_albums_view.album_id) AS count\n   FROM \"yandex_music_pet_project\".\"yandex_music_dbt\".\"ratings_of_albums_view\"\n  GROUP BY ratings_of_albums_view.name\n  ORDER BY (count(DISTINCT ratings_of_albums_view.album_id)) DESC", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-31T07:13:40.762286Z", "completed_at": "2024-12-31T07:13:40.766588Z"}, {"name": "execute", "started_at": "2024-12-31T07:13:40.767103Z", "completed_at": "2024-12-31T07:13:40.767115Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007714033126831055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.pet_project_dbt.top_5_albums_per_artist_view", "compiled": true, "compiled_code": "with total_likes as \n(\n\tSELECT album_id,\n\t       title,\n\t       CASE \n                WHEN genres LIKE '%bass%' THEN REPLACE(genres, 'bass', 'ukbass')\n\t\t\t\twhen ratings_of_albums_view.title = 'Breathe In'::text then 'trance'::text\n                when ratings_of_albums_view.title = 'Anjunabeats Worldwide 03'::text then 'trance'::text\n                when ratings_of_albums_view.title = 'A State of Trance 2024'::text then 'trance'::text\n                when ratings_of_albums_view.title = 'In Search of Sunrise 19'::text then 'trance'::text\n                ELSE ratings_of_albums_view.genres\n           END AS genres,\n\t       sum(likes_count) as total_likes,\n\t       artist_id,\n\t       name,\n\t       date\n\tFROM \"yandex_music_pet_project\".\"yandex_music_dbt\".\"ratings_of_albums_view\" \n\tGROUP BY album_id, title, genres, artist_id, name, date\n\torder by total_likes desc\n),\nranked_albums as \n(\n\tselect album_id,\n\t\t   title,\n\t\t   genres,\n\t\t   total_likes,\n\t\t   artist_id,\n\t\t   name,\n\t\t   date,\n\t\t   row_number() OVER (PARTITION BY artist_id ORDER BY total_likes DESC) AS rank\n\tfrom total_likes\n)\nselect artist_id,\n\t   name,\n       album_id,\n\t   title,\n\t   genres,\n\t   total_likes\nfrom ranked_albums\nwhere rank <= 5", "relation_name": "\"yandex_music_pet_project\".\"yandex_music_dbt\".\"top_5_albums_per_artist_view\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-31T07:13:40.778808Z", "completed_at": "2024-12-31T07:13:40.783629Z"}, {"name": "execute", "started_at": "2024-12-31T07:13:40.784265Z", "completed_at": "2024-12-31T07:13:40.784281Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014035940170288086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.pet_project_dbt.test_album_id", "compiled": true, "compiled_code": "select album_id\nfrom \"yandex_music_pet_project\".\"yandex_music_dbt\".\"top_5_albums_per_artist_view\"\nwhere album_id not in (select distinct album_id\n\t\t\t\t\t   from \"yandex_music_pet_project\".\"public\".\"albums\")", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-31T07:13:40.772382Z", "completed_at": "2024-12-31T07:13:40.785270Z"}, {"name": "execute", "started_at": "2024-12-31T07:13:40.786185Z", "completed_at": "2024-12-31T07:13:40.786199Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01664566993713379, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.pet_project_dbt.not_null_top_5_albums_per_artist_view_artist_id.a30437fe57", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect artist_id\nfrom \"yandex_music_pet_project\".\"yandex_music_dbt\".\"top_5_albums_per_artist_view\"\nwhere artist_id is null\n\n\n", "relation_name": null, "batch_results": null}], "elapsed_time": 0.43218302726745605, "args": {"write_json": true, "log_level": "info", "use_colors": true, "state_modified_compare_vars": false, "log_path": "/home/evgenij/pet_project/pet_project_dbt/logs", "compile": true, "require_batched_execution_for_custom_microbatch_strategy": false, "profiles_dir": "/home/evgenij/.dbt", "strict_mode": false, "vars": {}, "partial_parse": true, "indirect_selection": "eager", "require_explicit_package_overrides_for_builtin_materializations": true, "which": "generate", "require_nested_cumulative_type_params": false, "empty_catalog": false, "static_parser": true, "require_resource_names_without_spaces": false, "exclude": [], "static": false, "favor_state": false, "state_modified_compare_more_unrendered_values": false, "source_freshness_run_project_hooks": false, "version_check": true, "send_anonymous_usage_stats": true, "project_dir": "/home/evgenij/pet_project/pet_project_dbt", "log_level_file": "debug", "defer": false, "populate_cache": true, "skip_nodes_if_on_run_start_fails": false, "log_format_file": "debug", "partial_parse_file_diff": true, "cache_selected_only": false, "quiet": false, "select": [], "use_colors_file": true, "introspect": true, "print": true, "macro_debugging": false, "show_resource_report": false, "printer_width": 80, "log_file_max_bytes": 10485760, "require_yaml_configuration_for_mf_time_spines": false, "log_format": "default", "invocation_command": "dbt docs generate", "warn_error_options": {"include": [], "exclude": []}}}